buildscript {
    ext {
        assertjVersion = '3.22.0'
        lombokVersion = '1.18.22'
        cucumberVersion = '7.2.3'
        springBootVersion = '2.6.3'
        springCloudVersion = '3.1.0'
        jUnitPlatformVersion = '1.8.2'
    }
}

plugins {
    id 'java'
    id 'jacoco'
    id "com.diffplug.spotless" version "6.2.0"
    id 'org.springframework.boot' version "${springBootVersion}"
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'com.diffplug.spotless'
apply plugin: 'org.springframework.boot'

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory.set(layout.buildDirectory.dir("$buildDir/jacoco"))
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation 'org.jsoup:jsoup:1.14.3'
    implementation 'org.yaml:snakeyaml:1.29'
    implementation 'com.auth0:java-jwt:3.18.3'
    implementation 'com.google.code.gson:gson:2.8.9'
    implementation 'com.mikesamuel:json-sanitizer:1.2.3'
    implementation "org.projectlombok:lombok:${lombokVersion}"
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    implementation "org.springframework.cloud:spring-cloud-config-client:${springCloudVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb:${springBootVersion}"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:${springCloudVersion}"

    runtimeOnly "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
    testRuntimeOnly "org.junit.platform:junit-platform-console:${jUnitPlatformVersion}"

    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "io.cucumber:cucumber-java:${cucumberVersion}"
    testImplementation "io.cucumber:cucumber-spring:${cucumberVersion}"
    testImplementation "io.cucumber:cucumber-junit-platform-engine:${cucumberVersion}"
    testImplementation "org.junit.platform:junit-platform-suite:${jUnitPlatformVersion}"
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
        exclude group: 'org.assertj', module: 'assertj-core'
    }

}

group = 'com.microbank'
version = '0.1.0'
description = 'microbank-customer-service'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

springBoot {
    mainClass.set('com.microbank.customer.Application')
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Fail if Javadoc warnings are present.
tasks.withType(Javadoc) {
    options.addStringOption('Xwerror', '-quiet')
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat('1.13.0')
    }
}

jacocoTestReport {
    reports {
        html.destination file("${buildDir}/jacoco/jacocoHtml")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/model/**',
                              '**/exception/**',
                              '**/*Application*'])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/model/**',
                              '**/exception/**',
                              '**/*Application*'])
        }))
    }
}

sourceSets {
    test {
        java {
            srcDir 'src/test/integration'
        }
    }
}

compileJava {
    finalizedBy javadoc, spotlessJavaApply, spotlessJavaCheck
}

check {
    dependsOn jacocoTestCoverageVerification
}

test {
    if (System.properties.get('build') == 'docker') {
        exclude '**/cucumber/**'
    }
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}